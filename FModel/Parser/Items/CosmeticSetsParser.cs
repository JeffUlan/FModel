// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FModel.Parser.CosmeticSetsParser;
//
//    var cosmeticSetsParser = CosmeticSetsParser.FromJson(jsonString);

namespace FModel.Parser.CosmeticSetsParser
{
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CosmeticSetsParser
    {
        [JsonProperty("export_type")]
        public string ExportType { get; set; }

        [JsonProperty("Tag")]
        public Tag Tag { get; set; }

        [JsonProperty("DisplayName")]
        public Description DisplayName { get; set; }

        [JsonProperty("Description")]
        public Description Description { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("source_string")]
        public string SourceString { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("TagName")]
        public string TagName { get; set; }
    }

    public partial class CosmeticSetsParser
    {
        public static CosmeticSetsParser FromJson(string json) => JsonConvert.DeserializeObject<CosmeticSetsParser>(json, FModel.Parser.CosmeticSetsParser.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CosmeticSetsParser self) => JsonConvert.SerializeObject(self, FModel.Parser.CosmeticSetsParser.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
